asyncapi: '2.5.0'
info:
  title: JNX Member Statistics Websocket API
  version: '1.0.0'
  contact:
    name: Japannext
    url: https://www.japannext.co.jp/
  description: |
    This is just an example of the member stats api using AsyncAPI as the specification

externalDocs:
  url: url_for_docs_here

servers:
  public:
    url: localhost:8080
    description: These channels would not require any auth
    protocol: wss
  private:
    url: localhost:8081
    description: these channels would require auth
    protocol: wss
  
channels:
  /v1/memberstatistics/{firms}:
    parameters:
      firms:
        description: Name of firm
        schema:
          type: string
          enum: ['Goldman Sachs', 'Morgan', 'Rakuten']
    bindings:
      ws:
        bindingVersion: 0.1.0
        query:
          type: object
          description: |
            The semantics of entry type filtering is:
            If any entry type is specified as true or false, all of them must be explicitly flagged true to show up in the response
            If no entry types filtering parameters are included in the url, then all entry types will appear in the response
          properties:
            heartbeat:
              type: boolean
              default: false
              description: Optionally add this parameter and set to true to receive a heartbeat every 5 seconds
            instruments:
              type: boolean
              default: true
              description: Include what instruments firm has traded on today
            sessions:
              type: boolean
              default: true
              description: Include what sessions the firm used today
            board:
              type: boolean
              default: true
              description: Include what boards the firm has used today
            trades:
              type: boolean
              default: true
              description: Include number of trades
            amends:
              type: boolean
              default: true
              description: Include number of amends
            cancels:
              type: boolean
              default: true
              description: Include number of cancels
        subscribe:
          summary: Receive updates on a given firm
          message:
            $ref: '#/components/messages/memberStatistics'

components:
  messages:
    memberStatistics:
      summary: Message with firm stats
      description: |
        Initial message response will show existing state of stats. Subsequent messages will provide updates.
      payload:
        $ref: '#/components/schemas/firm'
      examples:
        - name: updateMessage
          summary: Example of an update message that contains a change in stat information.
          payload:
            type: update
            eventId: 36902233362
            timestamp: 1619769673
            timestampms: 1619769673527
            socket_sequence: 661
            events:
              - type: change
                side: trades 
                price: '500000'
                reason: buy
        - name: heartbeatMessage
          summary: Example of additional heartbeat message when you enable them. 
          payload:
            type: heartbeat
            socket_sequence: 1656
  schemas:
    market:
      type: object
      oneOf:
        - $ref: '#/components/schemas/heartbeat'
        - $ref: '#/components/schemas/update'
    heartbeat:
      allOf:
        - properties:
            type:
              type: string
              const: heartbeat
          required:
            - type
        - $ref: '#/components/schemas/default'
    update:
      allOf:
        - properties:
            type:
              type: string
              const: update
            eventId:
              type: integer
              description: A monotonically increasing sequence number indicating when this change occurred. These numbers are persistent and consistent between market data connections.
            events:
              $ref: '#/components/schemas/events'
            timestamp:
              type: string
              format: date-time
              description: The timestamp in seconds for this group of events (included for compatibility reasons). We recommend using the timestampms field instead.
            timestampms:
              type: string
              format: time
              description: The timestamp in milliseconds for this group of events.
          required:
            - type
            - eventId
            - events
            - timestamp
            - timestampms
        - $ref: '#/components/schemas/default'
    default:
      type: object
      description: This object is always part of the payload. In case of type=heartbeat, these are the only fields.
      required:
         - type
         - socket_sequence
      properties:
        socket_sequence:
          type: integer
          description: zero-indexed monotonic increasing sequence number attached to each message sent - if there is a gap in this sequence, you have missed a message. If you choose to enable heartbeats, then heartbeat and update messages will share a single increasing sequence. See [Sequence Numbers](https://docs.sandbox.gemini.com/websocket-api/#sequence-numbers) for more information.
    events:
      type: array
      description: indication that a trade has occurred.
      items:
        type: object
        additionalProperties: false
        properties:
          type:
            type: string
            enum: ['trade', 'change', 'auction, block_trade']
          price:
            type: number
            multipleOf: 1.000
            description: The price of this order book entry.
          side:
            type: string
            enum: ['bid', 'side']
          reason:
            type: string
            enum: ['place', 'trade', 'cancel', 'initial']
            description: Indicates why the change has occurred. initial is for the initial response message, which will show the entire existing state of the order book.
          remaining: 
            type: number
            multipleOf: 1.000
            description: The quantity remaining at that price level after this change occurred. May be zero if all orders at this price level have been filled or canceled.
          delta:
            type: number
            multipleOf: 1.000
            description: The quantity changed. May be negative, if an order is filled or canceled. For initial messages, delta will equal remaining.    
            
